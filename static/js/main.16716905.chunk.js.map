{"version":3,"sources":["components/header.js","components/GlobalData.js","components/mainGrid.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","className","AppBar","position","Toolbar","Typography","variant","axios","require","default","display","flexWrap","margin","width","height","GlobalData","useState","country","setCountry","globalData","setGlobalData","loading","err","setErr","apiRef","useRef","fetchGlobal","options","method","url","process","params","code","headers","request","then","response","data","catch","error","current","useEffect","Paper","elevation","gutterBottom","style","fontWeight","color","justifyContent","flexDirection","alignItems","padding","htmlFor","type","id","onChange","e","target","value","onClick","disabled","length","confirmed","displayType","thousandSeparator","renderText","critical","deaths","paper","textAlign","palette","text","secondary","MainGrid","Grid","container","item","xs","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.16716905.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            COVID 19 Tracker\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport NumberFormat from \"react-number-format\";\nvar axios = require(\"axios\").default;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"100%\",\n      height: theme.spacing(16),\n    },\n  },\n}));\n\nexport const GlobalData = () => {\n  const classes = useStyles();\n  const [country, setCountry] = useState(\"pk\");\n  const [globalData, setGlobalData] = useState();\n  const [loading, setLoading] = useState(false);\n  const [err,setErr] = useState(false)\n  const apiRef = useRef();\n\n  const fetchGlobal = () => {\n    var options = {\n      method: \"GET\",\n      url: process.env.REACT_APP_RAPID_URL,\n      params: { code: country },\n      headers: {\n        \"x-rapidapi-host\": process.env.REACT_APP_RAPID_HOST,\n        \"x-rapidapi-key\": process.env.REACT_APP_RAPID_API,\n        'Access-Control-Allow-Origin' : '*',\n        'Access-Control-Allow-Methods':'*',\n      },\n    };\n\n    axios\n      .request(options)\n      .then(function (response) {\n        setGlobalData(response.data);\n      })\n      .catch(function (error) {\n        setErr(true)\n      });\n  };\n  apiRef.current = fetchGlobal;\n\n  useEffect(() => {\n    apiRef.current();\n  }, []);\n\n  const Loading = \"Loading...\";\n    if (loading) {\n      return Loading;\n    } else\n  return (\n    <div className={classes.root}>\n      <Paper elevation={3}>\n        <Typography variant=\"p\" gutterBottom style={{ fontWeight: \"bold\", color: \"#d8cdcd\" }}> \n          Input country code (i.e pk for Pakistan) for the country\n        </Typography>\n        <Typography\n          variant=\"subtitle2\"\n          gutterBottom\n          style={{ fontWeight: \"bold\" }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              padding: \"1.5em\",\n            }}\n          >\n            <label htmlFor=\"input\">\n              {\" \"}\n              <input\n                type=\"text\"\n                id=\"input\"\n                onChange={(e) => setCountry(e?.target?.value)}\n                onClick={() =>  setErr(false)}\n              />\n              <button type=\"submit\" onClick={fetchGlobal} disabled={err ? true : false}>\n                Search\n              </button>\n            </label>\n          </div>\n          <Typography\n            variant=\"subtitle2\"\n            gutterBottom\n            style={{ fontWeight: \"bold\", color: \"gray\" }}\n          >\n            Currently showing results for {globalData?.length && globalData[0].country ? globalData[0].country: !globalData?.length ? \"un-recognized country\" : \"\"}\n          </Typography>\n        </Typography>\n      </Paper>\n      <Paper elevation={3}>\n        <Typography\n          variant=\"h4\"\n          gutterBottom\n          style={{ fontWeight: \"bold\", color: \"orange\" }}\n        >\n          <NumberFormat\n            value={globalData?.length && globalData[0].confirmed}\n            displayType={\"text\"}\n            thousandSeparator={true}\n            renderText={(value) => <div>{value}</div>}\n          />\n        </Typography>\n        <Typography\n          variant=\"subtitle2\"\n          gutterBottom\n          style={{ fontWeight: \"bold\", color: \"orange\" }}\n        >\n          Total Confirmed Cases\n        </Typography>\n      </Paper>\n      <Paper elevation={3}>\n        <Typography\n          variant=\"h4\"\n          gutterBottom\n          style={{ fontWeight: \"bold\", color: \"green\" }}\n        >\n          <NumberFormat\n            value={globalData?.length && globalData[0].critical}\n            displayType={\"text\"}\n            thousandSeparator={true}\n            renderText={(value) => <div>{value}</div>}\n          />\n        </Typography>\n        <Typography\n          variant=\"subtitle2\"\n          gutterBottom\n          style={{ fontWeight: \"bold\", color: \"green\" }}\n        >\n          Total Critical Cases\n        </Typography>\n      </Paper>\n      <Paper elevation={3}>\n        <Typography\n          variant=\"h4\"\n          gutterBottom\n          style={{ fontWeight: \"bold\", color: \"red\" }}\n        >\n          <NumberFormat\n            value={globalData?.length  && globalData[0].deaths}\n            displayType={\"text\"}\n            thousandSeparator={true}\n            renderText={(value) => <div>{value}</div>}\n          />\n        </Typography>\n        <Typography\n          variant=\"subtitle2\"\n          gutterBottom\n          style={{ fontWeight: \"bold\", color: \"red\" }}\n        >\n          Total Deaths\n        </Typography>\n      </Paper>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { GlobalData } from \"./GlobalData\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function MainGrid() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n          <Paper className={classes.paper}>\n            <GlobalData />\n          </Paper>\n        </Grid>\n\n        <Grid item xs={8}>\n          <Paper className={classes.paper}>Local Count Coming soon</Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header'\nimport MainGrid from './components/mainGrid'\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MainGrid/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}